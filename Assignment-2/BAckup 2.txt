// ConsoleApplication2.cpp : Defines the entry point for the console application.
//

// PROG8130 assignment #2 skeleton
#include "pch.h"
#include <stdio.h>
#include <stdlib.h>
#include <string.h>


// structure defining a binary tree node.  Lower sorted values will go the the left, higher to the right.
struct nodeData {
    const char		*name[30];				// character string of the data being stored in the node
	struct nodeData *left;		// pointer to the next node in the tree that is less than current node OR NULL if empty
	struct nodeData *right;		// pointer to the next node in the tree that is greater than current node OR NULL if empty
};
typedef struct nodeData node;

// Used the following data in your assignment #2
const char *inputData[12] = {
		{ "gvdag" },
		{ "xbtot" },
		{ "romfo" },
		{ "nvqrx" },
		{ "ofncq" },
		{ "vfhdi" },
		{ "mvjir" },
		{ "uhqbh" },
		{ "vbpof" },
		{ "hsaaj" },
		{ "hhobi" },
		{ "nxvuo" }
};

// The correct sorted order using a binary tree is:
//      gvdag
//      hhobi
//      hsaaj
//      mvjir
//      nvqrx
//      nxvuo
//      ofncq
//      romfo
//      uhqbh
//      vbpof
//      vfhdi
//      xbtot

// FUNCTION      : addToBinaryTree
//
// DESCRIPTION   :
//   This function will store the data in newNode into a binary tree according to alphabetical order
//
// PARAMETERS    :
//   newString - the string that is to be stored in the binary tree in alphabetica order
//
// RETURNS       :
//   Nothing
node *addToBinaryTree(const char *newString, node *tree) {
	// add code to put items into binary tree in alphabetical order here
	// consider using strcmp library function to decide if a name is greater or less than
	int result;
	node *x = tree;
	node *y = NULL;
	node *temp= (node*)malloc(sizeof(node));
	temp->left = NULL;
	temp->right = NULL;
	temp->name[30] = newString;
	node *newnode = temp;
	
	while (x != NULL)
	{
		printf("inside while loop\n");
		y = x;
		result = strcmp(newString,x->name[30]);
		printf("the strings compared are %s %s\n", newString, x->name[30]);
		if (result < 0)
		{
			printf("%s is greater than %s\n",x->name[30],newString);
			x = x->left;
		}
		else
		{
			printf("%s is smaller than %s\n",x->name[30],newString);
			x = x->right;
		}
	}
	
	if (y == NULL)
	{
		y = newnode;
	}
	result = strcmp(newString, y->name[30]);
	printf("the strings compared are %s %s\n", newString, y->name[30]);
	 if (result < 0)
	{
		y->left = newnode;
		printf("%s is greater than %s\n", y->name[30], newString);
	}
	else if (result > 0)
	{
		y->right = newnode;
		printf("%s is smaller than %s\n",y->name[30],newString);
	}
	return y;
}

// FUNCTION      : printBinaryTree
//
// DESCRIPTION   :
//   This function will print the entire binary tree out.  You can choose to print
//   it using recursion but more marks will be awarded if you do it non recursively.
//
// PARAMETERS    :
//   None
//
// RETURNS       :
//   Nothing
void printBinaryTree(node *tree) {
	// add code to print data in order starting at the "head" pointer
	if (tree == NULL)
	{
		printf("The tree is empty\n");
		return;
	}
	else
	{
		printBinaryTree(tree->left);
		printf("strings inside the tree are %s\n", tree->name[30]);
		printBinaryTree(tree->right);
	}
}

//struct nodeData *head = NULL;	// head of the binary tree
void main(void) {
	node *head = NULL;
	int i;
	// put all the data into the binary tree
	for (i = 0; i < 12; i++)
	{
		printf("%s\n", inputData[i]);
	}
	for (i = 0; i < 12; i++)
	{
		
		head = addToBinaryTree(inputData[i], head);
		printf("return string is %s\n", head->name[30]);
		
	}
	// print the entire tree.  It should come out in alphabetical order because of the way it was stored in the tree
	printBinaryTree(head);
	
}
